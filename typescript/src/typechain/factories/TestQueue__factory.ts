/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestQueue, TestQueueInterface } from "../TestQueue";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_number",
        type: "uint256",
      },
    ],
    name: "dequeueMany",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "drain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "enqueue",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    name: "enqueueMany",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeAgain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastItem",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peek",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "queueContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueEnd",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506109c0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638f2cbe701161008c578063a9541aa211610066578063a9541aa21461022e578063ab91c7b014610115578063b4de3e2314610236578063f6d161021461012f576100df565b80638f2cbe70146101ac578063957908d11461021c5780639890220b14610224576100df565b80632bef2892116100bd5780632bef2892146100e457806359e02dd7146101375780635b8b49591461013f576100df565b80631d1a696d146100e45780631f7b6d3214610115578063210ce6b91461012f575b600080fd5b610101600480360360208110156100fa57600080fd5b5035610253565b604080519115158252519081900360200190f35b61011d610265565b60408051918252519081900360200190f35b61011d610276565b61011d610282565b61015c6004803603602081101561015557600080fd5b503561028e565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610198578181015183820152602001610180565b505050509050019250505060405180910390f35b61011d600480360360208110156101c257600080fd5b8101906020810181356401000000008111156101dd57600080fd5b8201836020820111156101ef57600080fd5b8035906020019184602083028401116401000000008311171561021157600080fd5b50909250905061029b565b61011d6102f3565b61022c6102ff565b005b61022c610320565b61011d6004803603602081101561024c57600080fd5b503561032a565b600061025f818361034e565b92915050565b600061027160006103c8565b905090565b60006102716000610408565b60006102716000610445565b606061025f6000836104e6565b60006102da8383808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939250506106969050565b6fffffffffffffffffffffffffffffffff169392505050565b60006102716000610756565b61030960006103c8565b1561031e576103186000610756565b506102ff565b565b61031e600061088f565b600061033681836108d4565b6fffffffffffffffffffffffffffffffff1692915050565b81546000906fffffffffffffffffffffffffffffffff165b835470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1681116103be5760008181526001850160205260409020548314156103b657600191505061025f565b600101610366565b5060009392505050565b80546000906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691166104008282610941565b949350505050565b805470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660009081526001909101602052604090205490565b60006104508261095b565b156104bc57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d707479000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5080546fffffffffffffffffffffffffffffffff1660009081526001909101602052604090205490565b81546060906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691168361051f8383610941565b101561058c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e73756666696369656e740000000000000000000000000000000000000000604482015290519081900360640190fd5b60008467ffffffffffffffff811180156105a557600080fd5b506040519080825280602002602001820160405280156105cf578160200160208202803683370190505b50905060005b8581101561064d576fffffffffffffffffffffffffffffffff83166000908152600188016020526040902054825183908390811061060f57fe5b6020908102919091018101919091526fffffffffffffffffffffffffffffffff841660009081526001808a01909252604081205592830192016105d5565b5085547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117909455509192915050565b815470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660005b82518110156107225760018201915060008382815181106106de57fe5b602002602001015190506000801b8114610719576fffffffffffffffffffffffffffffffff8316600090815260018601602052604090208190555b506001016106c1565b5082546fffffffffffffffffffffffffffffffff808316700100000000000000000000000000000000029116179092555090565b80546000906fffffffffffffffffffffffffffffffff70010000000000000000000000000000000082048116911661078e8282610941565b6107f957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d707479000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6fffffffffffffffffffffffffffffffff811660009081526001850160205260409020549250821561084a576fffffffffffffffffffffffffffffffff811660009081526001850160205260408120555b83547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001919091016fffffffffffffffffffffffffffffffff1617909255919050565b80546fffffffffffffffffffffffffffffffff166108d15780547fffffffffffffffffffffffffffffffff000000000000000000000000000000001660011781555b50565b81546fffffffffffffffffffffffffffffffff808216700100000000000000000000000000000000928390048216600101918216909202919091178355811561025f576fffffffffffffffffffffffffffffffff8116600090815260019390930160205260409092205590565b60019103016fffffffffffffffffffffffffffffffff1690565b546fffffffffffffffffffffffffffffffff80821670010000000000000000000000000000000090920416109056fea2646970667358221220d668f9363e2e2a7186774e255d88f603538cf3acbb130b7427e047b5e109d40864736f6c63430007060033";

export class TestQueue__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestQueue> {
    return super.deploy(overrides || {}) as Promise<TestQueue>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestQueue {
    return super.attach(address) as TestQueue;
  }
  connect(signer: Signer): TestQueue__factory {
    return super.connect(signer) as TestQueue__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestQueueInterface {
    return new utils.Interface(_abi) as TestQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestQueue {
    return new Contract(address, _abi, signerOrProvider) as TestQueue;
  }
}
