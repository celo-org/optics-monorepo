/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { BadRecipient3, BadRecipient3Interface } from "../BadRecipient3";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "handle",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610124806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806356d5d47514602d575b600080fd5b60df60048036036060811015604157600080fd5b63ffffffff82351691602081013591810190606081016040820135640100000000811115606d57600080fd5b820183602082011115607e57600080fd5b80359060200191846001830284011164010000000083111715609f57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955060e1945050505050565b005b62abcdef60005260206000fdfea2646970667358221220ebe6cd34d60c56fedb5458f11d4ed1a5a0954b199fd0cd646685a6dda46c497764736f6c63430007060033";

export class BadRecipient3__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BadRecipient3> {
    return super.deploy(overrides || {}) as Promise<BadRecipient3>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): BadRecipient3 {
    return super.attach(address) as BadRecipient3;
  }
  connect(signer: Signer): BadRecipient3__factory {
    return super.connect(signer) as BadRecipient3__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadRecipient3Interface {
    return new utils.Interface(_abi) as BadRecipient3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BadRecipient3 {
    return new Contract(address, _abi, signerOrProvider) as BadRecipient3;
  }
}
