/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestQueue, TestQueueInterface } from "../TestQueue";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "dequeue",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_number",
        type: "uint256",
      },
    ],
    name: "dequeueMany",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "drain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "enqueue",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "_items",
        type: "bytes32[]",
      },
    ],
    name: "enqueueMany",
    outputs: [
      {
        internalType: "uint256",
        name: "_last",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeAgain",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lastItem",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "peek",
    outputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_item",
        type: "bytes32",
      },
    ],
    name: "queueContains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueEnd",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "queueLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d51806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638f2cbe7011610097578063ab91c7b011610066578063ab91c7b014610136578063b4de3e2314610290578063f2fde38b146102ad578063f6d161021461015057610100565b80638f2cbe7014610208578063957908d1146102785780639890220b14610280578063a9541aa21461028857610100565b806359e02dd7116100d357806359e02dd7146101585780635b8b495914610160578063715018a6146101cd5780638da5cb5b146101d757610100565b80631d1a696d146101055780631f7b6d3214610136578063210ce6b9146101505780632bef289214610105575b600080fd5b6101226004803603602081101561011b57600080fd5b50356102e0565b604080519115158252519081900360200190f35b61013e6102f3565b60408051918252519081900360200190f35b61013e610304565b61013e610310565b61017d6004803603602081101561017657600080fd5b503561031c565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156101b95781810151838201526020016101a1565b505050509050019250505060405180910390f35b6101d5610329565b005b6101df610440565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61013e6004803603602081101561021e57600080fd5b81019060208101813564010000000081111561023957600080fd5b82018360208201111561024b57600080fd5b8035906020019184602083028401116401000000008311171561026d57600080fd5b50909250905061045c565b61013e6104b7565b6101d56104c3565b6101d56104e4565b61013e600480360360208110156102a657600080fd5b50356104ee565b6101d5600480360360208110156102c357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610513565b60006102ed6065836106b5565b92915050565b60006102ff606561072f565b905090565b60006102ff606561076f565b60006102ff60656107ac565b60606102ed60658361084d565b6103316109fd565b73ffffffffffffffffffffffffffffffffffffffff1661034f610440565b73ffffffffffffffffffffffffffffffffffffffff16146103d157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60335460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60335473ffffffffffffffffffffffffffffffffffffffff1690565b600061049e838380806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250606593925050610a019050565b6fffffffffffffffffffffffffffffffff169392505050565b60006102ff6065610ac1565b6104cd606561072f565b156104e2576104dc6065610ac1565b506104c3565b565b6104e26065610bfa565b60006104fb606583610c3f565b6fffffffffffffffffffffffffffffffff1692915050565b61051b6109fd565b73ffffffffffffffffffffffffffffffffffffffff16610539610440565b73ffffffffffffffffffffffffffffffffffffffff16146105bb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610627576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610cf66026913960400191505060405180910390fd5b60335460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b81546000906fffffffffffffffffffffffffffffffff165b835470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16811161072557600081815260018501602052604090205483141561071d5760019150506102ed565b6001016106cd565b5060009392505050565b80546000906fffffffffffffffffffffffffffffffff7001000000000000000000000000000000008204811691166107678282610cac565b949350505050565b805470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660009081526001909101602052604090205490565b60006107b782610cc6565b1561082357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d707479000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b5080546fffffffffffffffffffffffffffffffff1660009081526001909101602052604090205490565b81546060906fffffffffffffffffffffffffffffffff700100000000000000000000000000000000820481169116836108868383610cac565b10156108f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f496e73756666696369656e740000000000000000000000000000000000000000604482015290519081900360640190fd5b60008467ffffffffffffffff8111801561090c57600080fd5b50604051908082528060200260200182016040528015610936578160200160208202803683370190505b50905060005b858110156109b4576fffffffffffffffffffffffffffffffff83166000908152600188016020526040902054825183908390811061097657fe5b6020908102919091018101919091526fffffffffffffffffffffffffffffffff841660009081526001808a019092526040812055928301920161093c565b5085547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117909455509192915050565b3390565b815470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1660005b8251811015610a8d576001820191506000838281518110610a4957fe5b602002602001015190506000801b8114610a84576fffffffffffffffffffffffffffffffff8316600090815260018601602052604090208190555b50600101610a2c565b5082546fffffffffffffffffffffffffffffffff808316700100000000000000000000000000000000029116179092555090565b80546000906fffffffffffffffffffffffffffffffff700100000000000000000000000000000000820481169116610af98282610cac565b610b6457604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600560248201527f456d707479000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6fffffffffffffffffffffffffffffffff8116600090815260018501602052604090205492508215610bb5576fffffffffffffffffffffffffffffffff811660009081526001850160205260408120555b83547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166001919091016fffffffffffffffffffffffffffffffff1617909255919050565b80546fffffffffffffffffffffffffffffffff16610c3c5780547fffffffffffffffffffffffffffffffff000000000000000000000000000000001660011781555b50565b81546fffffffffffffffffffffffffffffffff80821670010000000000000000000000000000000092839004821660010191821690920291909117835581156102ed576fffffffffffffffffffffffffffffffff8116600090815260019390930160205260409092205590565b60019103016fffffffffffffffffffffffffffffffff1690565b546fffffffffffffffffffffffffffffffff80821670010000000000000000000000000000000090920416109056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373a26469706673582212200a73c9ecbb2db390a210ad0fba9d4d8d6d6166aa9024a54ea3ce75d2949f016264736f6c63430007060033";

export class TestQueue__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestQueue> {
    return super.deploy(overrides || {}) as Promise<TestQueue>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestQueue {
    return super.attach(address) as TestQueue;
  }
  connect(signer: Signer): TestQueue__factory {
    return super.connect(signer) as TestQueue__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestQueueInterface {
    return new utils.Interface(_abi) as TestQueueInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestQueue {
    return new Contract(address, _abi, signerOrProvider) as TestQueue;
  }
}
