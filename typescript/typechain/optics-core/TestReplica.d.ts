/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface TestReplicaInterface extends ethers.utils.Interface {
  functions: {
    "PROCESS_GAS()": FunctionFragment;
    "RESERVE_GAS()": FunctionFragment;
    "acceptableRoot(bytes32)": FunctionFragment;
    "canConfirm()": FunctionFragment;
    "confirm()": FunctionFragment;
    "confirmAt(bytes32)": FunctionFragment;
    "current()": FunctionFragment;
    "doubleUpdate(bytes32,bytes32[2],bytes,bytes)": FunctionFragment;
    "homeDomainHash()": FunctionFragment;
    "initialize(uint32,address,bytes32,uint256,uint32)": FunctionFragment;
    "localDomain()": FunctionFragment;
    "messages(bytes32)": FunctionFragment;
    "nextPending()": FunctionFragment;
    "nextToProcess()": FunctionFragment;
    "optimisticSeconds()": FunctionFragment;
    "process(bytes)": FunctionFragment;
    "prove(bytes32,bytes32[32],uint256)": FunctionFragment;
    "proveAndProcess(bytes,bytes32[32],uint256)": FunctionFragment;
    "queueContains(bytes32)": FunctionFragment;
    "queueEnd()": FunctionFragment;
    "queueLength()": FunctionFragment;
    "remoteDomain()": FunctionFragment;
    "setCurrentRoot(bytes32)": FunctionFragment;
    "setFailed()": FunctionFragment;
    "setMessagePending(bytes)": FunctionFragment;
    "setRemoteDomain(uint32)": FunctionFragment;
    "setUpdater(address)": FunctionFragment;
    "state()": FunctionFragment;
    "testBranchRoot(bytes32,bytes32[32],uint256)": FunctionFragment;
    "testHomeDomainHash()": FunctionFragment;
    "testProcess(bytes)": FunctionFragment;
    "timestamp()": FunctionFragment;
    "update(bytes32,bytes32,bytes)": FunctionFragment;
    "updater()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "PROCESS_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_GAS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptableRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canConfirm",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "confirm", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "confirmAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "current", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "doubleUpdate",
    values: [BytesLike, [BytesLike, BytesLike], BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "homeDomainHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "messages", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "nextPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextToProcess",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optimisticSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "process", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "prove",
    values: [
      BytesLike,
      [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "proveAndProcess",
    values: [
      BytesLike,
      [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "queueContains",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "queueEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "remoteDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrentRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setFailed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMessagePending",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRemoteDomain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setUpdater", values: [string]): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testBranchRoot",
    values: [
      BytesLike,
      [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "testHomeDomainHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testProcess",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timestamp", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "updater", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "PROCESS_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_GAS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptableRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canConfirm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confirm", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "confirmAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "current", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doubleUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "homeDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextToProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optimisticSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "process", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "prove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proveAndProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queueEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurrentRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFailed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMessagePending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRemoteDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUpdater", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testBranchRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testHomeDomainHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testProcess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updater", data: BytesLike): Result;

  events: {
    "DoubleUpdate(bytes32,bytes32[2],bytes,bytes)": EventFragment;
    "ProcessError(uint32,address,bytes)": EventFragment;
    "Update(uint32,bytes32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DoubleUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProcessError"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export class TestReplica extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestReplicaInterface;

  functions: {
    PROCESS_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptableRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canConfirm(overrides?: CallOverrides): Promise<[boolean]>;

    confirm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    confirmAt(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    current(overrides?: CallOverrides): Promise<[string]>;

    doubleUpdate(
      _oldRoot: BytesLike,
      _newRoot: [BytesLike, BytesLike],
      _signature: BytesLike,
      _signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    homeDomainHash(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _remoteDomain: BigNumberish,
      _updater: string,
      _current: BytesLike,
      _optimisticSeconds: BigNumberish,
      _nextToProcess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    messages(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    nextPending(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _pending: string; _confirmAt: BigNumber }
    >;

    nextToProcess(overrides?: CallOverrides): Promise<[number]>;

    optimisticSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    process(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    prove(
      _leaf: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proveAndProcess(
      _message: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queueEnd(overrides?: CallOverrides): Promise<[string]>;

    queueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    remoteDomain(overrides?: CallOverrides): Promise<[number]>;

    setCurrentRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFailed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessagePending(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRemoteDomain(
      _remoteDomain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdater(
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    testBranchRoot(
      leaf: BytesLike,
      proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    testHomeDomainHash(overrides?: CallOverrides): Promise<[string]>;

    testProcess(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    update(
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updater(overrides?: CallOverrides): Promise<[string]>;
  };

  PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

  acceptableRoot(_root: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  canConfirm(overrides?: CallOverrides): Promise<boolean>;

  confirm(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  confirmAt(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  current(overrides?: CallOverrides): Promise<string>;

  doubleUpdate(
    _oldRoot: BytesLike,
    _newRoot: [BytesLike, BytesLike],
    _signature: BytesLike,
    _signature2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  homeDomainHash(overrides?: CallOverrides): Promise<string>;

  initialize(
    _remoteDomain: BigNumberish,
    _updater: string,
    _current: BytesLike,
    _optimisticSeconds: BigNumberish,
    _nextToProcess: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  messages(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  nextPending(
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { _pending: string; _confirmAt: BigNumber }>;

  nextToProcess(overrides?: CallOverrides): Promise<number>;

  optimisticSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  process(
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  prove(
    _leaf: BytesLike,
    _proof: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proveAndProcess(
    _message: BytesLike,
    _proof: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  queueContains(_item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  queueEnd(overrides?: CallOverrides): Promise<string>;

  queueLength(overrides?: CallOverrides): Promise<BigNumber>;

  remoteDomain(overrides?: CallOverrides): Promise<number>;

  setCurrentRoot(
    _newRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFailed(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessagePending(
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRemoteDomain(
    _remoteDomain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdater(
    _updater: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  testBranchRoot(
    leaf: BytesLike,
    proof: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike
    ],
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  testHomeDomainHash(overrides?: CallOverrides): Promise<string>;

  testProcess(
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestamp(overrides?: CallOverrides): Promise<BigNumber>;

  update(
    _oldRoot: BytesLike,
    _newRoot: BytesLike,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updater(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptableRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canConfirm(overrides?: CallOverrides): Promise<boolean>;

    confirm(overrides?: CallOverrides): Promise<void>;

    confirmAt(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    current(overrides?: CallOverrides): Promise<string>;

    doubleUpdate(
      _oldRoot: BytesLike,
      _newRoot: [BytesLike, BytesLike],
      _signature: BytesLike,
      _signature2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    homeDomainHash(overrides?: CallOverrides): Promise<string>;

    initialize(
      _remoteDomain: BigNumberish,
      _updater: string,
      _current: BytesLike,
      _optimisticSeconds: BigNumberish,
      _nextToProcess: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    messages(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    nextPending(
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { _pending: string; _confirmAt: BigNumber }
    >;

    nextToProcess(overrides?: CallOverrides): Promise<number>;

    optimisticSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    process(_message: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    prove(
      _leaf: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    proveAndProcess(
      _message: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueEnd(overrides?: CallOverrides): Promise<string>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    remoteDomain(overrides?: CallOverrides): Promise<number>;

    setCurrentRoot(
      _newRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setFailed(overrides?: CallOverrides): Promise<void>;

    setMessagePending(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRemoteDomain(
      _remoteDomain: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdater(_updater: string, overrides?: CallOverrides): Promise<void>;

    state(overrides?: CallOverrides): Promise<number>;

    testBranchRoot(
      leaf: BytesLike,
      proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    testHomeDomainHash(overrides?: CallOverrides): Promise<string>;

    testProcess(
      _message: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    updater(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    DoubleUpdate(
      oldRoot?: null,
      newRoot?: null,
      signature?: null,
      signature2?: null
    ): TypedEventFilter<
      [string, [string, string], string, string],
      {
        oldRoot: string;
        newRoot: [string, string];
        signature: string;
        signature2: string;
      }
    >;

    ProcessError(
      sequence?: BigNumberish | null,
      recipient?: string | null,
      returnData?: null
    ): TypedEventFilter<
      [number, string, string],
      { sequence: number; recipient: string; returnData: string }
    >;

    Update(
      homeDomain?: BigNumberish | null,
      oldRoot?: BytesLike | null,
      newRoot?: BytesLike | null,
      signature?: null
    ): TypedEventFilter<
      [number, string, string, string],
      {
        homeDomain: number;
        oldRoot: string;
        newRoot: string;
        signature: string;
      }
    >;
  };

  estimateGas: {
    PROCESS_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<BigNumber>;

    acceptableRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canConfirm(overrides?: CallOverrides): Promise<BigNumber>;

    confirm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    confirmAt(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    current(overrides?: CallOverrides): Promise<BigNumber>;

    doubleUpdate(
      _oldRoot: BytesLike,
      _newRoot: [BytesLike, BytesLike],
      _signature: BytesLike,
      _signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    homeDomainHash(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _remoteDomain: BigNumberish,
      _updater: string,
      _current: BytesLike,
      _optimisticSeconds: BigNumberish,
      _nextToProcess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    messages(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    nextPending(overrides?: CallOverrides): Promise<BigNumber>;

    nextToProcess(overrides?: CallOverrides): Promise<BigNumber>;

    optimisticSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    process(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    prove(
      _leaf: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proveAndProcess(
      _message: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueEnd(overrides?: CallOverrides): Promise<BigNumber>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    remoteDomain(overrides?: CallOverrides): Promise<BigNumber>;

    setCurrentRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFailed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessagePending(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRemoteDomain(
      _remoteDomain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdater(
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    testBranchRoot(
      leaf: BytesLike,
      proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testHomeDomainHash(overrides?: CallOverrides): Promise<BigNumber>;

    testProcess(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestamp(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updater(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PROCESS_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    RESERVE_GAS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptableRoot(
      _root: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canConfirm(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirm(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    confirmAt(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    current(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doubleUpdate(
      _oldRoot: BytesLike,
      _newRoot: [BytesLike, BytesLike],
      _signature: BytesLike,
      _signature2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    homeDomainHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _remoteDomain: BigNumberish,
      _updater: string,
      _current: BytesLike,
      _optimisticSeconds: BigNumberish,
      _nextToProcess: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nextPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextToProcess(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optimisticSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    process(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    prove(
      _leaf: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proveAndProcess(
      _message: BytesLike,
      _proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurrentRoot(
      _newRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFailed(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessagePending(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRemoteDomain(
      _remoteDomain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdater(
      _updater: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    testBranchRoot(
      leaf: BytesLike,
      proof: [
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike,
        BytesLike
      ],
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testHomeDomainHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testProcess(
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      _oldRoot: BytesLike,
      _newRoot: BytesLike,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updater(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
