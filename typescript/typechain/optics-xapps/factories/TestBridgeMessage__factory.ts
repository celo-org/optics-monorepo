/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestBridgeMessage,
  TestBridgeMessageInterface,
} from "../TestBridgeMessage";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes29",
        name: "_tokenId",
        type: "bytes29",
      },
      {
        internalType: "bytes29",
        name: "_action",
        type: "bytes29",
      },
    ],
    name: "testFormatMessage",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes29",
        name: "_action",
        type: "bytes29",
      },
    ],
    name: "testIsValidAction",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes29",
        name: "_view",
        type: "bytes29",
      },
    ],
    name: "testIsValidMessageLength",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50611072806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806378ab824114610046578063b45324c014610099578063c1faa21e14610155575b600080fd5b6100856004803603602081101561005c57600080fd5b50357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000016610194565b604080519115158252519081900360200190f35b6100e0600480360360408110156100af57600080fd5b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000813581169160200135166101a7565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561011a578181015183820152602001610102565b50505050905090810190601f1680156101475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6100856004803603602081101561016b57600080fd5b50357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000166101ee565b600061019f826101f9565b90505b919050565b60608260016101da815b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000841690610222565b506101e585856103a4565b95945050505050565b600061019f826104c2565b600061020482610521565b80610213575061021382610557565b8061019f575061019f82610576565b600061022e8383610595565b61039b57600061024c610240856105b7565b64ffffffffff166105bd565b91505060006102618464ffffffffff166105bd565b604080517f5479706520617373657274696f6e206661696c65642e20476f742030780000006020808301919091527fffffffffffffffffffff0000000000000000000000000000000000000000000060b088811b8216603d8501527f2e20457870656374656420307800000000000000000000000000000000000000604785015285901b1660548301528251603e818403018152605e8301938490527f08c379a000000000000000000000000000000000000000000000000000000000909352606282018181528351608284015283519496509294508493839260a2019185019080838360005b83811015610360578181015183820152602001610348565b50505050905090810190601f16801561038d5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50815b92915050565b60608260016103b2816101b1565b506103bc846101f9565b61042757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600760248201527f21616374696f6e00000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604080516002808252606082018352600092602083019080368337019050509050858160008151811061045657fe5b602002602001019062ffffff1916908162ffffff191681525050848160018151811061047e57fe5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000909216602092830291909101909101526104b881610691565b9695505050505050565b6000806104f07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000084166106e1565b6bffffffffffffffffffffffff169050606581148061050f5750606681145b8061051a5750602581145b9392505050565b6000600461052e836106f5565b60ff1614801561019f575060045b61054583610725565b600581111561055057fe5b1492915050565b60006005610564836106f5565b60ff1614801561019f5750600561053c565b60006003610583836106f5565b60ff1614801561019f5750600361053c565b60008164ffffffffff166105a8846105b7565b64ffffffffff16149392505050565b60d81c90565b600080601f5b600f8160ff1611156106255760ff600882021684901c6105e281610760565b61ffff16841793508160ff166010146105fd57601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016105c3565b50600f5b60ff8160ff16101561068b5760ff600882021684901c61064881610760565b61ffff16831792508160ff1660001461066357601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01610629565b50915091565b60405160609060006106a68460208401610790565b905060006106b3826106e1565b6bffffffffffffffffffffffff16905060006106ce83610810565b9184525082016020016040525092915050565b60181c6bffffffffffffffffffffffff1690565b600061019f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000008316826001610824565b60006107527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000083166105b7565b60ff16600581111561019f57fe5b600061077260048360ff16901c610845565b60ff161760081b62ffff001661078782610845565b60ff1617919050565b6000604051828111156107a35760206060fd5b506000805b84518110156107fb5760008582815181106107bf57fe5b602002602001015190506107d5818487016109b1565b506107df816106e1565b6bffffffffffffffffffffffff169290920191506001016107a8565b5061080860008483610ad9565b949350505050565b600061081b82610aec565b60200292915050565b60008160200360080260ff1661083b858585610b20565b901c949350505050565b600060f08083179060ff821614156108615760309150506101a2565b8060ff1660f114156108775760319150506101a2565b8060ff1660f2141561088d5760329150506101a2565b8060ff1660f314156108a35760339150506101a2565b8060ff1660f414156108b95760349150506101a2565b8060ff1660f514156108cf5760359150506101a2565b8060ff1660f614156108e55760369150506101a2565b8060ff1660f714156108fb5760379150506101a2565b8060ff1660f814156109115760389150506101a2565b8060ff1660f914156109275760399150506101a2565b8060ff1660fa141561093d5760619150506101a2565b8060ff1660fb14156109535760629150506101a2565b8060ff1660fc14156109695760639150506101a2565b8060ff1660fd141561097f5760649150506101a2565b8060ff1660fe14156109955760659150506101a2565b8060ff1660ff14156109ab5760669150506101a2565b50919050565b60006109bc83610c8e565b610a11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180610fb56028913960400191505060405180910390fd5b610a1a83610ca0565b610a6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602b815260200180610fdd602b913960400191505060405180910390fd5b6000610a7a846106e1565b6bffffffffffffffffffffffff1690506000610a9585610cdd565b6bffffffffffffffffffffffff1690506000604051905084811115610aba5760206060fd5b8285848460045afa506104b8610acf876105b7565b64ffffffffff1686855b606092831b9190911790911b1760181b90565b60006020610b126020610afe856106e1565b6bffffffffffffffffffffffff1690610cf1565b81610b1957fe5b0492915050565b600060ff8216610b325750600061051a565b610b3b846106e1565b6bffffffffffffffffffffffff16610b568460ff8516610cf1565b1115610bf857610b97610b6885610cdd565b6bffffffffffffffffffffffff16610b7f866106e1565b6bffffffffffffffffffffffff16858560ff16610d63565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201818152835160248401528351909283926044909101919085019080838360008315610360578181015183820152602001610348565b60208260ff161115610c55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603a815260200180610f7b603a913960400191505060405180910390fd5b600882026000610c6486610cdd565b6bffffffffffffffffffffffff1690506000610c7f83610ebe565b91909501511695945050505050565b6000610c9982610f07565b1592915050565b6000610cab826105b7565b64ffffffffff1664ffffffffff1415610cc6575060006101a2565b6000610cd183610f2f565b60405110199392505050565b60781c6bffffffffffffffffffffffff1690565b8181018281101561039e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f766572666c6f7720647572696e67206164646974696f6e2e00000000000000604482015290519081900360640190fd5b60606000610d70866105bd565b9150506000610d7e866105bd565b9150506000610d8c866105bd565b9150506000610d9a866105bd565b915050838383836040516020018080611008603591397fffffffffffff000000000000000000000000000000000000000000000000000060d087811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b84015286901b16604a8201526050016021610f5a82397fffffffffffff000000000000000000000000000000000000000000000000000060d094851b811660218301527f2077697468206c656e677468203078000000000000000000000000000000000060278301529290931b9091166036830152507f2e00000000000000000000000000000000000000000000000000000000000000603c82015260408051601d818403018152603d90920190529b9a5050505050505050505050565b7f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091011d90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000009081161490565b6000610f3a826106e1565b610f4383610cdd565b016bffffffffffffffffffffffff16905091905056fe2e20417474656d7074656420746f20696e646578206174206f666673657420307854797065644d656d566965772f696e646578202d20417474656d7074656420746f20696e646578206d6f7265207468616e20333220627974657354797065644d656d566965772f636f7079546f202d204e756c6c20706f696e74657220646572656654797065644d656d566965772f636f7079546f202d20496e76616c696420706f696e74657220646572656654797065644d656d566965772f696e646578202d204f76657272616e2074686520766965772e20536c696365206973206174203078a2646970667358221220906d01ed197fe8b14b494f3202d519238b4a5726e96276ad02e588262e4719ce64736f6c63430007060033";

export class TestBridgeMessage__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestBridgeMessage> {
    return super.deploy(overrides || {}) as Promise<TestBridgeMessage>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestBridgeMessage {
    return super.attach(address) as TestBridgeMessage;
  }
  connect(signer: Signer): TestBridgeMessage__factory {
    return super.connect(signer) as TestBridgeMessage__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestBridgeMessageInterface {
    return new utils.Interface(_abi) as TestBridgeMessageInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestBridgeMessage {
    return new Contract(address, _abi, signerOrProvider) as TestBridgeMessage;
  }
}
