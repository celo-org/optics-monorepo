/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockCoreInterface extends ethers.utils.Interface {
  functions: {
    "MAX_MESSAGE_BODY_BYTES()": FunctionFragment;
    "count()": FunctionFragment;
    "enqueue(uint32,bytes32,bytes)": FunctionFragment;
    "home()": FunctionFragment;
    "isReplica(address)": FunctionFragment;
    "localDomain()": FunctionFragment;
    "queueContains(bytes32)": FunctionFragment;
    "queueEnd()": FunctionFragment;
    "queueLength()": FunctionFragment;
    "root()": FunctionFragment;
    "sequences(uint32)": FunctionFragment;
    "tree()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_MESSAGE_BODY_BYTES",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "count", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "enqueue",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "home", values?: undefined): string;
  encodeFunctionData(functionFragment: "isReplica", values: [string]): string;
  encodeFunctionData(
    functionFragment: "localDomain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queueContains",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "queueEnd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "root", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sequences",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tree", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_MESSAGE_BODY_BYTES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "count", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enqueue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "home", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isReplica", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "localDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueContains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queueEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "root", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sequences", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tree", data: BytesLike): Result;

  events: {
    "Dispatch(uint256,uint64,bytes32,bytes)": EventFragment;
    "Enqueue(uint32,bytes32,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Dispatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Enqueue"): EventFragment;
}

export class MockCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockCoreInterface;

  functions: {
    MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<[BigNumber]>;

    count(overrides?: CallOverrides): Promise<[BigNumber]>;

    enqueue(
      _destination: BigNumberish,
      _recipient: BytesLike,
      _body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    home(overrides?: CallOverrides): Promise<[string]>;

    isReplica(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    queueEnd(overrides?: CallOverrides): Promise<[string]>;

    queueLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    root(overrides?: CallOverrides): Promise<[string]>;

    sequences(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    tree(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;
  };

  MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;

  count(overrides?: CallOverrides): Promise<BigNumber>;

  enqueue(
    _destination: BigNumberish,
    _recipient: BytesLike,
    _body: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  home(overrides?: CallOverrides): Promise<string>;

  isReplica(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  queueContains(_item: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  queueEnd(overrides?: CallOverrides): Promise<string>;

  queueLength(overrides?: CallOverrides): Promise<BigNumber>;

  root(overrides?: CallOverrides): Promise<string>;

  sequences(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  tree(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    enqueue(
      _destination: BigNumberish,
      _recipient: BytesLike,
      _body: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    home(overrides?: CallOverrides): Promise<string>;

    isReplica(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    queueEnd(overrides?: CallOverrides): Promise<string>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<string>;

    sequences(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    tree(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Dispatch(
      leafIndex?: BigNumberish | null,
      destinationAndSequence?: BigNumberish | null,
      leaf?: BytesLike | null,
      message?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        leafIndex: BigNumber;
        destinationAndSequence: BigNumber;
        leaf: string;
        message: string;
      }
    >;

    Enqueue(
      _destination?: BigNumberish | null,
      _recipient?: BytesLike | null,
      _body?: null
    ): TypedEventFilter<
      [number, string, string],
      { _destination: number; _recipient: string; _body: string }
    >;
  };

  estimateGas: {
    MAX_MESSAGE_BODY_BYTES(overrides?: CallOverrides): Promise<BigNumber>;

    count(overrides?: CallOverrides): Promise<BigNumber>;

    enqueue(
      _destination: BigNumberish,
      _recipient: BytesLike,
      _body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    home(overrides?: CallOverrides): Promise<BigNumber>;

    isReplica(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueEnd(overrides?: CallOverrides): Promise<BigNumber>;

    queueLength(overrides?: CallOverrides): Promise<BigNumber>;

    root(overrides?: CallOverrides): Promise<BigNumber>;

    sequences(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tree(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_MESSAGE_BODY_BYTES(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    count(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enqueue(
      _destination: BigNumberish,
      _recipient: BytesLike,
      _body: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    home(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isReplica(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueContains(
      _item: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueEnd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    root(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sequences(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tree(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
